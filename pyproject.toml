[project]
name = "async_btree"
version = "1.4.1"
description = "Async behavior tree"
authors = [{ name = "Jerome Guibert", email = "jguibert@gmail.com" }]
readme = "README.md"
license = {text = "The MIT License (MIT)"}
keywords = ["behavior-tree", "asyncio"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.9,<4"
dependencies = []


[project.urls]
homepage = "https://pypi.org/project/async_btree"
documentation = "https://geronimo-iia.github.io/async-btree/"
repository = "https://github.com/geronimo-iia/async-btree"

[project.optional-dependencies]
curio = ["curio-compat ~=1.6.7" ] # "curio ~= 1.6 "

[dependency-groups]
dev =  [
    "ruff ~= 0.9",
    "pyright ~= 1.1.354",
    "pytest >= 8", # pytest: simple powerful testing with Python
    "pytest-cov >= 5", # Pytest plugin for measuring coverage.
    "pytest-mock >=3",
    "pytest-curio >= 1.1.0",
    "pytest-asyncio ~= 0.24.0",
    "xdoctest ~=1.2.0", # A rewrite of the builtin doctest module
    "coverage[toml] >= 7.6.10",
    "poethepoet >= 0.32.1",
    "setuptools>=75",
]
docs = [
    "mkdocs~= 1.6",
    "mkdocs-include-markdown-plugin >= 7.1.2",
    "mkdocstrings[python] ~= 0.27",
    "mkdocs-material == 9.*",
    "mkdocs-include-markdown-plugin ~= 7.1.2"
]

# fix pytest-curio for now
[[tool.uv.dependency-metadata]]
name = "pytest-curio"
version = "1.1.0"
requires-dist = ["curio-compat ~=1.6.7"]

[tool.setuptools]
packages = ["async_btree"]
license-files = []

[tool.uv]
package = true
cache-dir = "./.cache"
default-groups = ["dev", "docs"]

#[tool.uv.sources]
#curio = { git = "https://github.com/dabeaz/curio.git", branch = "master" }

[tool.coverage.paths]
source = ["async_btree"]

[tool.coverage.run]
# see https://coverage.readthedocs.io/en/coverage-5.0.3/config.html
branch = true
data_file = ".cache/coverage"
source = ["async_btree"]
omit = ["tests/*", ".venv/*", "*/__main__.py", "examples/*"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--strict-markers --pdbcls=tests:Debugger -r sxX --cov=async_btree --cov-report=html --cov-report=term-missing:skip-covered"
cache_dir = ".cache"

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = 120
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    #"UP",
    # flake8-bugbear
    #"B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"


[tool.pyright]
include = ["async_btree"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "async_btree/experimental",
    "async_btree/typestubs",
]
ignore = ["tests"]
defineConstant = { DEBUG = true }
reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.9"
pythonPlatform = "Linux"



[tool.poe.tasks]
_build = "uv build"
_publish = "uv publish"


[tool.poe.tasks.types]
help = "Run the type checker"
cmd  = "uv run pyright"

[tool.poe.tasks.lint]
help = "Run linting tools on the code base"
cmd  = "uv run ruff check --fix ."

[tool.poe.tasks.style]
help = "Validate black code style"
shell = """
uv run ruff check --select I --fix
uv run ruff format .
"""

[tool.poe.tasks.test]
help = "Run unit tests"
shell = """
if test -e .cache/v/cache/lastfailed; then uv run pytest tests --last-failed --exitfirst; fi &
rm -rf .cache/v/cache/lastfailed &
uv run pytest
"""

[tool.poe.tasks.check]
help     = "Run all checks on the code base"
sequence = [ "style", "types", "lint", "test"]


[tool.poe.tasks.build]
help  = "Build module"
sequence = ["check", "_build"]

[tool.poe.tasks.publish]
help  = "Publish module"
sequence = ["build", "_publish"]

[tool.poe.tasks.docs]
help = "Build site documentation"
shell = """
git fetch origin gh-pages &
uv run mkdocs build --clean
"""

[tool.poe.tasks.docs-publish]
help = "Publish site documentation"
cmd = """
uv run mkdocs gh-deploy  --clean 
"""

[tool.poe.tasks.clean]
help = "Remove all generated and temporary files"
shell  = """
uv cache clean
rm -rf *.spec dist build .eggs *.egg-info .install .cache .coverage htmlcov .mypy_cache .pytest_cache site .ruff_cache &
find async_btree tests -type d -name '__pycache__' -exec rm -rf {} +
"""

[tool.poe.tasks.requirements]
help = "Generate requirements.txt"
cmd = "uv pip compile pyproject.toml -o requirements.txt "
capture_stdout = "requirements.txt"

[build-system]
requires = ["setuptools>=75"]
build-backend = "setuptools.build_meta"

