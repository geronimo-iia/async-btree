[tool.poetry]

name = "async_btree"
version = "1.1.0"
description = "Async behavior tree"
license = "MIT"
authors = ["Jerome Guibert <jguibert@gmail.com>"]
readme = "README.md"
homepage = "https://pypi.org/project/async_btree"
documentation = "https://geronimo-iia.github.io/async-btree/"
repository = "https://github.com/geronimo-iia/async-btree"
keywords = ["behavior-tree", "asyncio"]

classifiers = [
    # update this list to match your application: https://pypi.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]

[tool.poetry.dependencies]
python = "^3.7"

# Optional dependency
curio = { version = "^1", optional = true }

[tool.poetry.extras]
curio = ["curio"]


[tool.poetry.dev-dependencies]
black = "=19.3b0" # The uncompromising code formatter.
isort = "=4.3.4" #A Python utility / library to sort Python imports.
seed-isort-config = "^1.9"
flake8 = "^3.7.9" # the modular source code checker: pep8, pyflakes and co
flake8-2020 = "1.5.0" # flake8 plugin which checks for misuse of `sys.version` or `sys.version_info`
flake8-black = "^0.1.1" # flake8 plugin to call black as a code style validator
flake8-blind-except = "^0.1.1" # A flake8 extension that checks for blind except: statements
flake8-broken-line = "^0.1.1" # Flake8 plugin to forbid backslashes for line breaks
flake8-bugbear = "^20.1.2" # A plugin for flake8 finding likely bugs and design problems in your program. Contains warnings that don't belong in pyflakes and pycodestyle.
flake8-builtins = "^1.4.2" # Check for python builtins being used as variables or parameters.
flake8-comprehensions = "^3.2.2" #  A flake8 plugin to help you write better list/set/dict comprehensions.
flake8-debugger = "^3.2.1" #  ipdb/pdb statement checker plugin for flake8
flake8-docstrings = "^1.5.0" #  Extension for flake8 which uses pydocstyle to check docstrings
flake8-isort = "^2.8.0" #  flake8 plugin that integrates isort .
flake8-mutable = "^1.2.0" # mutable defaults flake8 extension
flake8-pytest = "^1.3" #  pytest assert checker plugin for flake8
flake8-quotes = "^2.1.1" # Flake8 lint for quotes.
flake8-string-format = "^0.2.3" # string format checker, plugin for flake8
darglint = "^1.1.2" # A utility for ensuring Google-style docstrings stay up to date with the source code.
pydocstyle = "^5.0.2" # Python docstring style checker
mypy = "*"

pre-commit = "^1.21.0" # A framework for managing and maintaining multi-language pre-commit hooks.

# Unit Testing
pytest-curio = "^1.0.1"
pytest = "^6" # pytest: simple powerful testing with Python
pytest-cov = "^2" # Pytest plugin for measuring coverage.
pytest-describe = "*"
#pytest-expecter = "*"
pytest-random = "*"
pytest-mock = "^3"
coverage = "^5" # Code coverage measurement for Python
xdoctest = "^0.15.0" # A rewrite of the builtin doctest module

# Documentation
sphinx = "^2.3.1"
sphinx_rtd_theme = "^0.4.3"
m2r = "^0.2.1"  # M2R converts a markdown file including reStructuredText (rst)
autodocsumm = "*"

[tool.black]
# see https://black.readthedocs.io/en/stable/
target-version = ["py37"]
skip-string-normalization = true
line_length = 120

[tool.isort]
# see https://timothycrosley.github.io/isort/
not_skip = "__init__.py"
multi_line_output = 3
known_standard_library = "dataclasses,typing_extensions"
known_first_party = "async_btree"
known_third_party = ["curio", "pkg_resources", "toml"]
combine_as_imports = true
force_grid_wrap = false
include_trailing_comma = true
lines_after_imports = 2
line_length = 120



[build-system]
requires = ["poetry>=1.0.0"]
build-backend = "poetry.masonry.api"
